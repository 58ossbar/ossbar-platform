<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ossbar.modules.evgl.question.persistence.TepExaminePaperScoreGapfillingMapper">
	<resultMap id="BaseResultMap"
		type="com.ossbar.modules.evgl.question.domain.TepExaminePaperScoreGapfilling">
		<result column="id" jdbcType="VARCHAR"
			property="id" />
		<result column="history_id" jdbcType="VARCHAR"
			property="historyId" />
		<result column="score_id" jdbcType="VARCHAR"
			property="scoreId" />
		<result column="questions_id" jdbcType="VARCHAR"
			property="questionsId" />
		<result column="trainee_id" jdbcType="VARCHAR"
			property="traineeId" />
		<result column="content" jdbcType="LONGVARCHAR"
			property="content" />
		<result column="sort_num" jdbcType="INTEGER"
			property="sortNum" />
	</resultMap>

	<!-- 用于select查询公用抽取的列 -->
	<sql id="Base_Column_List">
		id,history_id,score_id,questions_id,trainee_id,content,sort_num
	</sql>
	<insert id="insert" parameterType="com.ossbar.modules.evgl.question.domain.TepExaminePaperScoreGapfilling">
		INSERT INTO T_EP_EXAMINE_PAPER_SCORE_GAPFILLING (
		id ,
		history_id ,
		score_id ,
		questions_id ,
		trainee_id ,
		content ,
		sort_num 
		) VALUES (

#{id,jdbcType=VARCHAR} ,

#{historyId,jdbcType=VARCHAR} ,

#{scoreId,jdbcType=VARCHAR} ,

#{questionsId,jdbcType=VARCHAR} ,

#{traineeId,jdbcType=VARCHAR} ,

#{content,jdbcType=LONGVARCHAR} ,

#{sortNum,jdbcType=INTEGER} 
		)
	</insert>
	<update id="update" parameterType="com.ossbar.modules.evgl.question.domain.TepExaminePaperScoreGapfilling">
		UPDATE T_EP_EXAMINE_PAPER_SCORE_GAPFILLING 
		<set>
		<if test="historyId != null">
		history_id = #{historyId,jdbcType=VARCHAR},
		</if>
		<if test="scoreId != null">
		score_id = #{scoreId,jdbcType=VARCHAR},
		</if>
		<if test="questionsId != null">
		questions_id = #{questionsId,jdbcType=VARCHAR},
		</if>
		<if test="traineeId != null">
		trainee_id = #{traineeId,jdbcType=VARCHAR},
		</if>
		<if test="content != null">
		content = #{content,jdbcType=LONGVARCHAR},
		</if>
		<if test="sortNum != null">
		sort_num = #{sortNum,jdbcType=INTEGER},
		</if>
		</set>
		WHERE
		id = #{id,jdbcType=VARCHAR} 
	</update>
	<delete id="delete" parameterType="java.lang.String">
		DELETE FROM T_EP_EXAMINE_PAPER_SCORE_GAPFILLING WHERE
		id =
		#{id,jdbcType=VARCHAR} 
	</delete>
	<delete id="deleteBatch" parameterType="java.lang.String">
		DELETE FROM T_EP_EXAMINE_PAPER_SCORE_GAPFILLING WHERE
		id in
		<foreach item="id" collection="array" open="("
			separator="," close=")">
#{id,jdbcType=VARCHAR} 
		</foreach>
	</delete>
	<select id="selectObjectById" parameterType="java.lang.String"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from T_EP_EXAMINE_PAPER_SCORE_GAPFILLING WHERE
		id = #{id,jdbcType=VARCHAR} 
	</select>
	<!-- 实际业务需要增加的SQL语句 -->
    <select id="selectListByMap" resultMap="BaseResultMap"
        parameterType="map">
        select * from T_EP_EXAMINE_PAPER_SCORE_GAPFILLING
        <where>
        		<if test="scoreIds != null and scoreIds.size() > 0">
                and score_id in
                	<foreach collection="scoreIds" item="scoreId" open="(" separator="," close=")">
                		#{scoreId,jdbcType=VARCHAR}
                	</foreach> 
                </if>
                <if test="historyId != null and historyId.trim() != ''">
                and history_id =#{historyId,jdbcType=VARCHAR}            </if>
                <if test="scoreId != null and scoreId.trim() != ''">
                and score_id =#{scoreId,jdbcType=VARCHAR}            </if>
                <if test="questionsId != null and questionsId.trim() != ''">
                and questions_id =#{questionsId,jdbcType=VARCHAR}            </if>
                <if test="traineeId != null and traineeId.trim() != ''">
                and trainee_id =#{traineeId,jdbcType=VARCHAR}            </if>
                <if test="content != null and content.trim() != ''">
                and content =#{content,jdbcType=LONGVARCHAR}            </if>
                <if test="sortNum != null and sortNum != ''">
                and sort_num =#{sortNum,jdbcType=INTEGER}            </if>
        </where>
        <choose>
            <when test="sidx != null and sidx.trim() != ''">
                order by ${sidx} ${order}
            </when>
            <otherwise>
                order by id  desc
            </otherwise>
        </choose>
    </select>
    
    <select id="selectListMapByMap" resultType="map"
        parameterType="map">
        select * from T_EP_EXAMINE_PAPER_SCORE_GAPFILLING t1
        <where>
                <if test="historyId != null and historyId.trim() != ''">
                and t1.history_id =#{historyId,jdbcType=VARCHAR}            </if>
                <if test="scoreId != null and scoreId.trim() != ''">
                and t1.score_id =#{scoreId,jdbcType=VARCHAR}            </if>
                <if test="questionsId != null and questionsId.trim() != ''">
                and t1.questions_id =#{questionsId,jdbcType=VARCHAR}            </if>
                <if test="traineeId != null and traineeId.trim() != ''">
                and t1.trainee_id =#{traineeId,jdbcType=VARCHAR}            </if>
                <if test="content != null and content.trim() != ''">
                and t1.content =#{content,jdbcType=LONGVARCHAR}            </if>
                <if test="sortNum != null and sortNum != ''">
                and t1.sort_num =#{sortNum,jdbcType=INTEGER}            </if>
        </where>
        <choose>
            <when test="sidx != null and sidx.trim() != ''">
                order by ${sidx} ${order}
            </when>
            <otherwise>
                order by t1.id  desc
            </otherwise>
        </choose>
    </select>
    
    <select id="selectSimpleListMapByMap" resultType="map"
        parameterType="map">
        select ifnull(t1.content, '') as content, t1.sort_num as sortNum, t1.score_id as scoreId,
        t1.trainee_id as traineeId
        from T_EP_EXAMINE_PAPER_SCORE_GAPFILLING t1
        <where>
                <if test="historyId != null and historyId.trim() != ''">
                and t1.history_id =#{historyId,jdbcType=VARCHAR}            </if>
                <if test="scoreId != null and scoreId.trim() != ''">
                and t1.score_id =#{scoreId,jdbcType=VARCHAR}            </if>
                <if test="questionsId != null and questionsId.trim() != ''">
                and t1.questions_id =#{questionsId,jdbcType=VARCHAR}            </if>
                <if test="traineeId != null and traineeId.trim() != ''">
                and t1.trainee_id =#{traineeId,jdbcType=VARCHAR}            </if>
                <if test="content != null and content.trim() != ''">
                and t1.content =#{content,jdbcType=LONGVARCHAR}            </if>
        </where>
        <choose>
            <when test="sidx != null and sidx.trim() != ''">
                order by ${sidx} ${order}
            </when>
            <otherwise>
                order by t1.id  desc
            </otherwise>
        </choose>
    </select>
    
    <update id="batchUpdateContentByDuplicate" parameterType="java.util.List">
		INSERT INTO T_EP_EXAMINE_PAPER_SCORE_GAPFILLING
		(id, content)
		VALUES
		<foreach collection="list" item="item" separator=",">
			(
			#{item.id}, #{item.content}
			)
		</foreach>
		on duplicate key update
		id=values(id),
		content=values(content)
		;
	</update>
	
	<insert id="insertBatch" parameterType="java.util.List">
		insert into t_ep_examine_paper_score_gapfilling
			(
				id, history_id, score_id, questions_id, trainee_id,
				content, sort_num
			)
		values
		<foreach collection="list" item="obj" separator="," >
			(
				#{obj.id}, #{obj.historyId}, #{obj.scoreId}, #{obj.questionsId}, #{obj.traineeId},
				#{obj.content}, #{obj.sortNum}
			)
		</foreach>
	</insert>
</mapper>

