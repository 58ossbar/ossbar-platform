<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ossbar.modules.evgl.tch.persistence.TevglTchClassroomSbMapper">
	<resultMap id="BaseResultMap"
		type="com.ossbar.modules.evgl.tch.domain.TevglTchClassroomSb">
		<result column="sb_id" jdbcType="VARCHAR"
			property="sbId" />
		<result column="ct_id" jdbcType="VARCHAR"
			property="ctId" />
		<result column="ct_pkg_id" jdbcType="VARCHAR"
			property="ctPkgId" />
		<result column="pkg_id" jdbcType="VARCHAR"
			property="pkgId" />
		<result column="subject_id" jdbcType="VARCHAR"
			property="subjectId" />
		<result column="create_user_id" jdbcType="VARCHAR"
			property="createUserId" />
		<result column="create_time" jdbcType="VARCHAR"
			property="createTime" />
	</resultMap>

	<!-- 用于select查询公用抽取的列 -->
	<sql id="Base_Column_List">
		sb_id,ct_id,ct_pkg_id,pkg_id,subject_id,create_user_id,create_time
	</sql>
	<insert id="insert" parameterType="com.ossbar.modules.evgl.tch.domain.TevglTchClassroomSb">
		INSERT INTO T_EVGL_TCH_CLASSROOM_SB (
		sb_id ,
		ct_id ,
		ct_pkg_id ,
		pkg_id,
		subject_id ,
		create_user_id ,
		create_time 
		) VALUES (

#{sbId,jdbcType=VARCHAR} ,

#{ctId,jdbcType=VARCHAR} ,

#{ctPkgId,jdbcType=VARCHAR} ,

#{pkgId,jdbcType=VARCHAR} ,

#{subjectId,jdbcType=VARCHAR} ,

#{createUserId,jdbcType=VARCHAR} ,

#{createTime,jdbcType=VARCHAR} 
		)
	</insert>
	<update id="update" parameterType="com.ossbar.modules.evgl.tch.domain.TevglTchClassroomSb">
		UPDATE T_EVGL_TCH_CLASSROOM_SB 
		<set>
		<if test="ctId != null">
		ct_id = #{ctId,jdbcType=VARCHAR},
		</if>
		<if test="ctPkgId != null">
		ct_pkg_id = #{ctPkgId,jdbcType=VARCHAR},
		</if>
		<if test="pkgId != null">
		pkg_id = #{pkgId,jdbcType=VARCHAR},
		</if>
		<if test="subjectId != null">
		subject_id = #{subjectId,jdbcType=VARCHAR},
		</if>
		<if test="createUserId != null">
		create_user_id = #{createUserId,jdbcType=VARCHAR},
		</if>
		<if test="createTime != null">
		create_time = #{createTime,jdbcType=VARCHAR},
		</if>
		</set>
		WHERE
		sb_id = #{sbId,jdbcType=VARCHAR} 
	</update>
	<delete id="delete" parameterType="java.lang.String">
		DELETE FROM T_EVGL_TCH_CLASSROOM_SB WHERE
		sb_id =
		#{sbId,jdbcType=VARCHAR} 
	</delete>
	<delete id="deleteBatch" parameterType="java.lang.String">
		DELETE FROM T_EVGL_TCH_CLASSROOM_SB WHERE
		sb_id in
		<foreach item="sbId" collection="array" open="("
			separator="," close=")">
#{sbId,jdbcType=VARCHAR} 
		</foreach>
	</delete>
	<select id="selectObjectById" parameterType="java.lang.String"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from T_EVGL_TCH_CLASSROOM_SB WHERE
		sb_id = #{sbId,jdbcType=VARCHAR} 
	</select>
	<!-- 实际业务需要增加的SQL语句 -->
    <select id="selectListByMap" resultMap="BaseResultMap"
        parameterType="map">
        select * from T_EVGL_TCH_CLASSROOM_SB
        <where>
                <if test="ctId != null and ctId.trim() != ''">
                and ct_id =#{ctId,jdbcType=VARCHAR}            </if>
                <if test="ctPkgId != null and ctPkgId.trim() != ''">
                and ct_pkg_id =#{ctPkgId,jdbcType=VARCHAR}            </if>
                <if test="subjectId != null and subjectId.trim() != ''">
                and subject_id =#{subjectId,jdbcType=VARCHAR}            </if>
                <if test="createUserId != null and createUserId.trim() != ''">
                and create_user_id =#{createUserId,jdbcType=VARCHAR}            </if>
                <if test="createTime != null and createTime.trim() != ''">
                and create_time =#{createTime,jdbcType=VARCHAR}            </if>
        </where>
        <choose>
            <when test="sidx != null and sidx.trim() != ''">
                order by ${sidx} ${order}
            </when>
            <otherwise>
                order by sb_id  desc
            </otherwise>
        </choose>
    </select>
    
    <select id="selectListMapByMap" resultType="map"
        parameterType="map">
        select * from T_EVGL_TCH_CLASSROOM_SB t1
        <where>
                <if test="ctId != null and ctId.trim() != ''">
                and t1.ct_id =#{ctId,jdbcType=VARCHAR}            </if>
                <if test="ctPkgId != null and ctPkgId.trim() != ''">
                and t1.ct_pkg_id =#{ctPkgId,jdbcType=VARCHAR}            </if>
                <if test="subjectId != null and subjectId.trim() != ''">
                and t1.subject_id =#{subjectId,jdbcType=VARCHAR}            </if>
                <if test="createUserId != null and createUserId.trim() != ''">
                and t1.create_user_id =#{createUserId,jdbcType=VARCHAR}            </if>
                <if test="createTime != null and createTime.trim() != ''">
                and t1.create_time =#{createTime,jdbcType=VARCHAR}            </if>
        </where>
        <choose>
            <when test="sidx != null and sidx.trim() != ''">
                order by ${sidx} ${order}
            </when>
            <otherwise>
                order by t1.sb_id  desc
            </otherwise>
        </choose>
    </select>
    <select id="queryExtraBooks" parameterType="map" resultType="com.ossbar.modules.evgl.book.vo.RoomBookVo">
        select t1.pkg_id, t1.pkg_logo, t1.pkg_version, t1.subject_id, t2.subject_name, t1.pkg_trainee_name as subjectAuthor
        from t_evgl_pkg_info t1
        inner join t_evgl_book_subject t2 on t1.subject_id = t2.subject_id
        <where>
        	t1.pkg_book_type = "2" and t1.release_status = "Y"
	        <if test="subjectName != null and subjectName.trim() != ''">
	        and t2.subject_name like concat('%', #{subjectName,jdbcType=VARCHAR}, '%')            </if>
        </where>
        <choose>
            <when test="sidx != null and sidx.trim() != ''">
                order by ${sidx} ${order}
            </when>
            <otherwise>
                order by t2.subject_name desc, t1.pkg_version desc
            </otherwise>
        </choose>
    </select><select id="queryExtraBooksByUnionAll" parameterType="map" resultType="com.ossbar.modules.evgl.book.vo.RoomBookVo">
		select t.* from (

			select 'self' as type, 1 as ranking,
			t1.pkg_id as pkgId, t1.ref_pkg_id as refPkgId, t1.pkg_name as pkgName, t1.pkg_version as pkgVersion, t1.pkg_logo as pkgLogo, t1.major_id as majorId,
			t1.display, t1.pkg_limit as pkgLimit, t1.subject_id as subjectId, t1.create_user_id as createUserId, t1.create_time as createTime,  t1.update_time as updateTime,
			t2.subject_ref as subjectRef, t1.receiver_user_id as receiverUserId, t2.subject_name as subjectName, t1.pkg_trainee_name as subjectAuthor,
			ifnull(t3.trainee_name, t3.nick_name) as createUserName
			from t_evgl_pkg_info t1
			inner join t_evgl_book_subject t2 on t1.subject_id = t2.subject_id
			inner join t_evgl_trainee_info t3 on t1.create_user_id = t3.trainee_id
			WHERE
			t1.release_status = "Y" and t1.pkg_book_type = "2"
			and t1.create_user_id = #{loginUserId} and t1.receiver_user_id is null

			union all

			select 'auth' as type, 2 as ranking,
			t1.pkg_id as pkgId, t1.ref_pkg_id as refPkgId, t1.pkg_name as pkgName, t1.pkg_version as pkgVersion, t1.pkg_logo as pkgLogo, t1.major_id as majorId,
			t1.display, t1.pkg_limit as pkgLimit, t1.subject_id as subjectId, t1.create_user_id as createUserId, t1.create_time as createTime,  t1.update_time as updateTime,
			t2.subject_ref as subjectRef, t1.receiver_user_id as receiverUserId, t2.subject_name as subjectName, t1.pkg_trainee_name as subjectAuthor,
			ifnull(t3.trainee_name, t3.nick_name) as createUserName
			from t_evgl_pkg_info t1
			inner join t_evgl_book_subject t2 on t1.subject_id = t2.subject_id
			inner join t_evgl_trainee_info t3 on t1.create_user_id = t3.trainee_id
			inner join t_evgl_bookpkg_team t4 on t1.pkg_id = t4.pgk_id
			WHERE
			t1.release_status = "Y" and t1.pkg_book_type = "2"
			and t4.user_id = #{loginUserId}

			union all

			select 'free' as type, 3 as ranking,
			t1.pkg_id as pkgId, t1.ref_pkg_id as refPkgId, t1.pkg_name as pkgName, t1.pkg_version as pkgVersion, t1.pkg_logo as pkgLogo, t1.major_id as majorId,
			t1.display, t1.pkg_limit as pkgLimit, t1.subject_id as subjectId, t1.create_user_id as createUserId, t1.create_time as createTime,  t1.update_time as updateTime,
			t2.subject_ref as subjectRef, t1.receiver_user_id as receiverUserId, t2.subject_name as subjectName, t1.pkg_trainee_name as subjectAuthor,
			ifnull(t3.trainee_name, t3.nick_name) as createUserName
			from t_evgl_pkg_info t1
			inner join t_evgl_book_subject t2 on t1.subject_id = t2.subject_id
			inner join t_evgl_trainee_info t3 on t1.create_user_id = t3.trainee_id
			WHERE
			t1.release_status = "Y" and t1.pkg_limit = "2" and t1.pkg_book_type = "2"
			and t1.create_user_id != #{loginUserId}

			union all

			select 'receiver' as type, 4 as ranking,
			t1.pkg_id as pkgId, t1.ref_pkg_id as refPkgId, t1.pkg_name as pkgName, t1.pkg_version as pkgVersion, t1.pkg_logo as pkgLogo, t1.major_id as majorId,
			t1.display, t1.pkg_limit as pkgLimit, t1.subject_id as subjectId, t1.create_user_id as createUserId, t1.create_time as createTime,  t1.update_time as updateTime,
			t2.subject_ref as subjectRef, t1.receiver_user_id as receiverUserId, t2.subject_name as subjectName, t1.pkg_trainee_name as subjectAuthor,
			ifnull(t3.trainee_name, t3.nick_name) as createUserName
			from t_evgl_pkg_info t1
			inner join t_evgl_book_subject t2 on t1.subject_id = t2.subject_id
			inner join t_evgl_trainee_info t3 on t1.create_user_id = t3.trainee_id
			WHERE
			t1.release_status = "Y" and t1.pkg_book_type = "2"
			and t1.receiver_user_id = #{loginUserId}

		) t
		<where>
			<if test="subjectName != null and subjectName.trim() != ''">
				and t.subject_name like concat('%', #{subjectName,jdbcType=VARCHAR}, '%')            </if>
		</where>
		<choose>
			<when test="sidx != null and sidx.trim() != ''">
				order by ${sidx} ${order}
			</when>
			<otherwise>
				order by t.subjectName desc, t.pkgVersion desc
			</otherwise>
		</choose>
	</select>
    <delete id="deleteByCtId" parameterType="java.lang.String">
		DELETE FROM T_EVGL_TCH_CLASSROOM_SB WHERE ct_id = #{ctId,jdbcType=VARCHAR}
	</delete>
	<insert id="insertBatch" parameterType="java.util.List">
		insert into T_EVGL_TCH_CLASSROOM_SB
		(
		sb_id, ct_id, ct_pkg_id, pkg_id, subject_id,
		create_user_id, create_time
		)
		values
		<foreach collection="list" item="obj" separator="," >
			(
			#{obj.sbId}, #{obj.ctId}, #{obj.ctPkgId}, #{obj.pkgId}, #{obj.subjectId},
			#{obj.createUserId}, #{obj.createTime}
			)
		</foreach>
	</insert>
	<select id="findSubjectIdList" resultType="string" parameterType="string">
		select subject_id from T_EVGL_TCH_CLASSROOM_SB where ct_id = #{ctId}
	</select>
	<select id="findSubjectList" parameterType="string" resultType="com.ossbar.modules.evgl.book.vo.RoomBookVo">
		select t1.pkg_id, t1.subject_id, t2.subject_name, t3.pkg_trainee_name as subjectAuthor, t3.pkg_version
		from T_EVGL_TCH_CLASSROOM_SB t1
		inner join t_evgl_book_subject t2 on t1.subject_id = t2.subject_id
		inner join t_evgl_pkg_info t3 on t2.subject_id = t3.subject_id
		where t1.ct_id = #{ctId}
	</select>
	<select id="findSubjectByCtId" parameterType="string" resultType="com.ossbar.modules.evgl.book.vo.RoomBookVo">
		select t1.pkg_id, t1.ct_id, t2.subject_id, t3.subject_name, t2.pkg_trainee_name as subjectAuthor, t2.pkg_version, t2.ref_pkg_id
		from t_evgl_tch_classroom t1
	 	inner join t_evgl_pkg_info t2 on t1.pkg_id = t2.pkg_id
		inner join t_evgl_book_subject t3 on t2.subject_id = t3.subject_id
		where t1.ct_id = #{ctId}
	</select>
</mapper>

