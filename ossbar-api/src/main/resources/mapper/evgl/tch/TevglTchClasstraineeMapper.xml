<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 班级学员 -->
<mapper namespace="com.ossbar.modules.evgl.tch.persistence.TevglTchClasstraineeMapper">
	<resultMap id="BaseResultMap"
		type="com.ossbar.modules.evgl.tch.domain.TevglTchClasstrainee">
		<result column="ct_id" jdbcType="VARCHAR"
			property="ctId" />
		<result column="class_id" jdbcType="VARCHAR"
			property="classId" />
		<result column="trainee_id" jdbcType="VARCHAR"
			property="traineeId" />
	</resultMap>

	<!-- 用于select查询公用抽取的列 -->
	<sql id="Base_Column_List">
		ct_id,class_id,trainee_id
	</sql>
	<insert id="insert" parameterType="com.ossbar.modules.evgl.tch.domain.TevglTchClasstrainee">
		INSERT INTO T_EVGL_TCH_CLASSTRAINEE (
		ct_id ,
		class_id ,
		trainee_id 
		) VALUES (

#{ctId,jdbcType=VARCHAR} ,

#{classId,jdbcType=VARCHAR} ,

#{traineeId,jdbcType=VARCHAR} 
		)
	</insert>
	<update id="update" parameterType="com.ossbar.modules.evgl.tch.domain.TevglTchClasstrainee">
		UPDATE T_EVGL_TCH_CLASSTRAINEE 
		<set>
		<if test="classId != null">
		class_id = #{classId,jdbcType=VARCHAR},
		</if>
		<if test="traineeId != null">
		trainee_id = #{traineeId,jdbcType=VARCHAR},
		</if>
		</set>
		WHERE
		ct_id = #{ctId,jdbcType=VARCHAR} 
	</update>
	<delete id="delete" parameterType="java.lang.String">
		DELETE FROM T_EVGL_TCH_CLASSTRAINEE WHERE
		ct_id =
		#{ctId,jdbcType=VARCHAR} 
	</delete>
	<delete id="deleteBatch" parameterType="java.lang.String">
		DELETE FROM T_EVGL_TCH_CLASSTRAINEE WHERE
		ct_id in
		<foreach item="ctId" collection="array" open="("
			separator="," close=")">
#{ctId,jdbcType=VARCHAR} 
		</foreach>
	</delete>
	<select id="selectObjectById" parameterType="java.lang.String"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from T_EVGL_TCH_CLASSTRAINEE WHERE
		ct_id = #{ctId,jdbcType=VARCHAR} 
	</select>
	<!-- 实际业务需要增加的SQL语句 -->
    <select id="selectListByMap" resultMap="BaseResultMap"
        parameterType="map">
        select t1.*, 
        ifnull(t2.trainee_name, t2.nick_name) as traineeName, 
        t3.class_name as className 
        from T_EVGL_TCH_CLASSTRAINEE t1
        left join t_evgl_trainee_info t2 on t1.trainee_id = t2.trainee_id
        left join t_evgl_tch_class t3 on t1.class_id = t3.class_id
        <where>
        		<if test="classIds != null and classIds.size() > 0">
					and t1.class_id in
					<foreach collection="classIds" item="classId" open="("
						separator="," close=")">
						#{classId}
					</foreach>
				</if>
                <if test="classId != null and classId.trim() != ''">
                and t1.class_id =#{classId,jdbcType=VARCHAR}            </if>
                <if test="traineeId != null and traineeId.trim() != ''">
                and t1.trainee_id =#{traineeId,jdbcType=VARCHAR}            </if>
        </where>
        <choose>
            <when test="sidx != null and sidx.trim() != ''">
                order by ${sidx} ${order}
            </when>
            <otherwise>
                order by t1.create_time desc, t2.trainee_name desc
            </otherwise>
        </choose>
    </select>
    
    <select id="selectListMapByMap" resultType="map"
        parameterType="map">
        select t1.ct_id as ctId, t1.class_id as classId, t3.class_name as className, t1.trainee_id as traineeId, 
        IFNULL(t2.trainee_name,t2.nick_name) as traineeName, t2.trainee_sex as traineeSex,
        ifnull(t2.trainee_pic, ifnull(t2.trainee_head, '/uploads/defaulthead.png')) as traineePic, t2.job_number as jobNumber,
        t2.mobile
        from T_EVGL_TCH_CLASSTRAINEE t1 
        inner join t_evgl_trainee_info t2 on t1.trainee_id = t2.trainee_id
        inner join t_evgl_tch_class t3 on t1.class_id = t3.class_id
        <where>
        		<if test="traineeIds != null and traineeIds.size() > 0">
					and t1.trainee_id in
					<foreach collection="traineeIds" item="traineeId" open="("
						separator="," close=")">
						#{traineeId}
					</foreach>
				</if>
				<if test="jobNumber != null and jobNumber.trim() != ''">
                and t2.job_number like concat ('%', #{jobNumber,jdbcType=VARCHAR}, '%')            
                </if>
                <if test="traineeName != null and traineeName.trim() != ''">
                and t2.trainee_name like concat ('%', #{traineeName,jdbcType=VARCHAR}, '%')
                or t2.nick_name like concat ('%', #{traineeName,jdbcType=VARCHAR}, '%')
                </if>
                <if test="traineeSex != null and traineeSex.trim() != ''">
                and t2.trainee_sex =#{traineeSex,jdbcType=VARCHAR}            </if>
                <if test="mobile != null and mobile.trim() != ''">
                and t2.mobile like concat ('%', #{mobile,jdbcType=VARCHAR}, '%')            </if>
                <if test="classId != null and classId.trim() != ''">
                and t1.class_id =#{classId,jdbcType=VARCHAR}            </if>
                <if test="traineeId != null and traineeId.trim() != ''">
                and t1.trainee_id =#{traineeId,jdbcType=VARCHAR}            </if>
        </where>
        <choose>
            <when test="sidx != null and sidx.trim() != ''">
                order by ${sidx} ${order}
            </when>
            <otherwise>
                order by t1.ct_id  desc
            </otherwise>
        </choose>
    </select>
    
    <select id="selectListMapForWeb" resultType="map"
        parameterType="map">
        select t1.ct_id as ctId, t1.class_id as classId, t3.class_name as className, t1.trainee_id as traineeId, 
        IFNULL(t2.trainee_name,t2.nick_name) as traineeName, t2.trainee_sex as traineeSex,
        ifnull(t2.trainee_pic, t2.trainee_head) as traineePic
        from T_EVGL_TCH_CLASSTRAINEE t1 
        inner join t_evgl_trainee_info t2 on t1.trainee_id = t2.trainee_id
        inner join t_evgl_tch_class t3 on t1.class_id = t3.class_id
        <where>
        
        		<if test="traineeName != null and traineeName.trim() != ''">
                and t2.trainee_name like concat ('%', #{traineeName,jdbcType=VARCHAR}, '%')
                or t2.nick_name like concat ('%', #{traineeName,jdbcType=VARCHAR}, '%')
                </if>
        
                <if test="classId != null and classId.trim() != ''">
                and t1.class_id =#{classId,jdbcType=VARCHAR}            </if>
                <if test="traineeId != null and traineeId.trim() != ''">
                and t1.trainee_id =#{traineeId,jdbcType=VARCHAR}            </if>
        </where>
        <choose>
            <when test="sidx != null and sidx.trim() != ''">
                order by ${sidx} ${order}
            </when>
            <otherwise>
                order by t1.ct_id  desc
            </otherwise>
        </choose>
    </select>
    
    <select id="selectListMapForWebExclude" resultType="map"
        parameterType="map">
        select t1.ct_id as ctId, t1.class_id as classId, t3.class_name as className, t1.trainee_id as traineeId, 
        IFNULL(t2.trainee_name,t2.nick_name) as traineeName, ifnull(t2.trainee_sex, '') as traineeSex,
        ifnull(t2.job_number, '') as jobNumber,
        ifnull(t2.trainee_pic, t2.trainee_head) as traineePic
        from T_EVGL_TCH_CLASSTRAINEE t1 
        inner join t_evgl_trainee_info t2 on t1.trainee_id = t2.trainee_id
        inner join t_evgl_tch_class t3 on t1.class_id = t3.class_id
        <where>
        		
        		t1.trainee_id not in (select trainee_id from t_evgl_tch_classroom_trainee where ct_id = #{ctId})
        		
        		<if test="traineeName != null and traineeName.trim() != ''">
                and t2.trainee_name like concat ('%', #{traineeName,jdbcType=VARCHAR}, '%')
                or t2.nick_name like concat ('%', #{traineeName,jdbcType=VARCHAR}, '%')
                </if>
        
                <if test="classId != null and classId.trim() != ''">
                and t1.class_id =#{classId,jdbcType=VARCHAR}            </if>
                <if test="traineeId != null and traineeId.trim() != ''">
                and t1.trainee_id =#{traineeId,jdbcType=VARCHAR}            </if>
        </where>
        <choose>
            <when test="sidx != null and sidx.trim() != ''">
                order by ${sidx} ${order}
            </when>
            <otherwise>
                order by t1.ct_id  desc
            </otherwise>
        </choose>
    </select>
    
    <insert id="insertBatch" parameterType="java.util.List">
		insert into T_EVGL_TCH_CLASSTRAINEE
			(ct_id, class_id, trainee_id, create_time)
		values
	    <foreach collection="list" item="obj" separator="," >
	    	(#{obj.ctId}, #{obj.classId}, #{obj.traineeId}, #{obj.createTime})
	    </foreach>
	</insert>
	
	<select id="selectClassIdListByTraineeId" parameterType="java.lang.String" resultType="java.lang.String">
		select DISTINCT class_id from t_evgl_tch_classtrainee where trainee_id = #{traineeId}
    </select>
    
    <select id="selectTraineeIdListByClassId" parameterType="java.lang.String" resultType="java.lang.String">
		select DISTINCT trainee_id from t_evgl_tch_classtrainee where class_id = #{classId}
    </select>
    
    <select id="findTheLatestClassId" parameterType="java.lang.String" resultType="java.lang.String">
		select t1.class_id from t_evgl_tch_classtrainee t1 
		inner join t_evgl_tch_class t2 on t1.class_id = t2.class_id
		where t1.trainee_id = #{traineeId}
		ORDER BY t2.create_time desc limit 1
    </select>
    
    <select id="selectClassTraineeListByMap" parameterType="map" resultType="com.ossbar.modules.evgl.trainee.vo.TraineeInfoVO">
        select t1.ct_id as ctId, t1.class_id as classId, t1.trainee_id as traineeId,
        IFNULL(t2.trainee_name,t2.nick_name) as traineeName, t2.trainee_sex as traineeSex,
        ifnull(t2.trainee_pic, ifnull(t2.trainee_head, '/uploads/defaulthead.png')) as traineePic,
        t2.trainee_school, t2.major, t2.job_number, t2.email,
        t2.mobile, GROUP_CONCAT(tx.class_name) as className
        from T_EVGL_TCH_CLASSTRAINEE t1
        inner join t_evgl_trainee_info t2 on t1.trainee_id = t2.trainee_id
        left join (select b1.class_name, b1.class_id from t_evgl_tch_class b1) tx on tx.class_id = t1.class_id 
        <where>
            <if test="traineeIds != null and traineeIds.size() > 0">
                and t1.trainee_id in
                <foreach collection="traineeIds" item="traineeId" open="("
                         separator="," close=")">
                    #{traineeId}
                </foreach>
            </if>
            <if test="jobNumber != null and jobNumber.trim() != ''">
                and t2.job_number like concat ('%', #{jobNumber,jdbcType=VARCHAR}, '%')
            </if>
            <if test="traineeName != null and traineeName.trim() != ''">
                and t2.trainee_name like concat ('%', #{traineeName,jdbcType=VARCHAR}, '%')
                or t2.nick_name like concat ('%', #{traineeName,jdbcType=VARCHAR}, '%')
            </if>
            <if test="traineeSex != null and traineeSex.trim() != ''">
                and t2.trainee_sex =#{traineeSex,jdbcType=VARCHAR}            </if>
            <if test="mobile != null and mobile.trim() != ''">
                and t2.mobile like concat ('%', #{mobile,jdbcType=VARCHAR}, '%')            </if>
            <if test="classId != null and classId.trim() != ''">
                and t1.class_id =#{classId,jdbcType=VARCHAR}            </if>
            <if test="traineeId != null and traineeId.trim() != ''">
                and t1.trainee_id =#{traineeId,jdbcType=VARCHAR}            </if>
        </where>
        GROUP BY t1.trainee_id
        <choose>
            <when test="sidx != null and sidx.trim() != ''">
                order by ${sidx} ${order}
            </when>
            <otherwise>
                order by t1.ct_id  desc
            </otherwise>
        </choose>
    </select>
</mapper>

